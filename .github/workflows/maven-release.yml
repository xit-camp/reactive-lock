# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Maven Release

on:
  release:
    types:
      - created

jobs:
  release:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file

      - name: Cache Repo
        # https://github.com/marketplace/actions/cache?version=v1.1.2
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Dry run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "$GIT_USER_EMAIL"
          PD=$(pwd)
          cp -r . ../dry-run && cd ../dry-run
          echo "<settings><servers><server><id>github</id><username>$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $1}')</username><password>\${env.GITHUB_TOKEN}</password></server></servers></settings>" > ./settings.xml
          REPO="github::default::https://maven.pkg.github.com/${GITHUB_REPOSITORY}"
          mvn --batch-mode release:prepare -DdryRun -DpushChanges=false \
            -DaltDeploymentRepository="${REPO}" -DaltReleaseDeploymentRepository="${REPO}" -DaltSnapshotDeploymentRepository="${REPO}" \
            -Darguments='-Dmaven.javadoc.failOnError=false -Dmaven.deploy.skip=true -Dmaven.site.skip=true -Ddocker.skip.push=true -DskipITs'
          cd $PD && rm -rf ../dry-run

      - name: Release with Maven
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $1}')"
          git config --local user.email "$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $1}')"
          mkdir -p ~/.m2
          echo "<settings><servers><server><id>github</id><username>$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $1}')</username><password>\${env.GITHUB_TOKEN}</password></server></servers></settings>" > ~/.m2/settings.xml
          REPO="github::default::https://maven.pkg.github.com/${GITHUB_REPOSITORY}"
          VER=$(mvn -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
          RELV=${VER%%-*}
          REL=${RELEASE_PREFIX:+$RELEASE_PREFIX-}r$RELV
          mvn --batch-mode clean release:clean release:prepare release:perform \
            -DtagNameFormat=${RELEASE_PREFIX:+$RELEASE_PREFIX-}v@{project.version} \
            -DpushChanges=false \
            -DlocalCheckout=true \
            -DaltDeploymentRepository="${REPO}" -DaltReleaseDeploymentRepository="${REPO}" -DaltSnapshotDeploymentRepository="${REPO}" \
            -Darguments='-Dmaven.javadoc.failOnError=false -Dmaven.deploy.skip=true -Dmaven.site.skip=true -Ddocker.skip=true -Ddocker.skip.push=true -DskipITs'

      - name: Publish to GitHub Packages Apache Maven
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p ~/.m2
          echo "<settings><servers><server><id>github</id><username>$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $1}')</username><password>\${env.GITHUB_TOKEN}</password></server></servers></settings>" > ~/.m2/settings.xml
          REPO="github::default::https://maven.pkg.github.com/${GITHUB_REPOSITORY}"
          mvn -Dmaven.test.skip -B deploy -DaltDeploymentRepository="${REPO}" -DaltReleaseDeploymentRepository="${REPO}" -DaltSnapshotDeploymentRepository="${REPO}"